swagger: "2.0"
info:
  description: " api key `special-key` to test the authorization filters."
  version: "3.0.0"
  title: "My ProductStore"
  termsOfService: "http://swagger.io/terms/"
 
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your product"
- name: "store"
  description: "Access to ProductStore orders"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /pet:
    post:
      tags:
      - "pet"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Products object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
 
  /pet/{productId}:
    get:
      tags:
      - "pet"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "product not found"
      security:
      - api_key: []
    put:
      tags:
      - "pet"
      summary: "Updates a product in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the product"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the product"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a product"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a product"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the product"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of product that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Please, log first."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  # /user/{username}:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Get user by user name"
  #     description: ""
  #     operationId: "getUserByName"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "path"
  #       description: "The name that needs to be fetched. Use user1 for testing. "
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/User"
  #       "400":
  #         description: "Invalid username supplied"
  #       "404":
  #         description: "User not found"

  #   delete:
  #     tags:
  #     - "user"
  #     summary: "Delete user"
  #     description: "This can only be done by the logged in user."
  #     operationId: "deleteUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "path"
  #       description: "The name that needs to be deleted"
  #       required: true
  #       type: "string"
  #     responses:
  #       "400":
  #         description: "Invalid username supplied"
  #       "404":
  #         description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify products in your account"
      read:pets: "read your products"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      productId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  User:
    type: "object"
    required:
     - "id"
     - "status"
     - "quantity"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "User"
 
  Pet:
    type: "object"
    required:
    - "name"
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Name of ur product"
      category:
        type: "string"
        description: "category in the store"
        enum:
        - "clothes"
        - "sweets"
        - "brooms"
        - "medicine"
        - "paintings"
        - "books"
        - "flowers"
        - "cups"
      quantity:
        type: "integer"
        format: "int32"
      status:
        type: "string"
        description: "status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  # ApiResponse:
  #   type: "object"
  #   properties:
  #     code:
  #       type: "integer"
  #       format: "int32"
  #     type:
  #       type: "string"
  #     message:
  #       type: "string"
# externalDocs:
#   description: "Find out more about Swagger"
#   url: "http://swagger.io"