openapi: 3.0.1
info:
  title: My ProductStore
  description: ' api key `special-key` to test the authorization filters.'
  termsOfService: http://swagger.io/terms/
  version: 3.0.0
servers:
- url: https://productstore.swagger.io/v2
- url: http://productstore.swagger.io/v2
tags:
- name: product
  description: Everything about your product
- name: store
  description: Access to ProductStore orders
- name: user
  description: Operations about user
paths:
  /product:
    post:
      tags:
      - product
      summary: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Products object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - productstore_auth:
        - write:products
        - read:products
      x-codegen-request-body-name: body
  /product/{productId}:
    get:
      tags:
      - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
      - name: productId
        in: path
        description: ID of product to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: product not found
          content: {}
      security:
      - api_key: []
    put:
      tags:
      - product
      summary: Updates a product in the store with form data
      operationId: updateProductWithForm
      parameters:
      - name: productId
        in: path
        description: ID of product that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the product
                status:
                  type: string
                  description: Updated status of the product
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - productstore_auth:
        - write:products
        - read:products
    delete:
      tags:
      - product
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: productId
        in: path
        description: Product id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
      security:
      - productstore_auth:
        - write:products
        - read:products
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a product
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the product
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
      security:
      - api_key: []
      x-codegen-request-body-name: body
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of product that needs to be fetched
        required: true
        schema:
          maximum: 10.0
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative
        or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
      - productstore_auth:
        - write:products
        - read:products
  /user:
    put:
      tags:
      - user
      summary: Upload user
      description: Ğ¡hange what u need.
      operationId: updateUser
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: product not found
          content: {}
      security:
      - api_key: []
      x-codegen-request-body-name: body
    post:
      tags:
      - user
      summary: Create user
      description: Please, log first.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/{userId}:
    delete:
      tags:
      - user
      summary: Delete user by ID
      description: For valid response try integer IDs with positive integer value.
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - api_key: []
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
      xml:
        name: Order
    User:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Product:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Name of ur product
        category:
          type: string
          description: category in the store
          enum:
          - clothes
          - sweets
          - brooms
          - medicine
          - paintings
          - books
          - flowers
          - cups
        quantity:
          type: integer
          format: int32
        status:
          type: string
          description: status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Product
  securitySchemes:
    productstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://productstore.swagger.io/oauth/dialog
          scopes:
            write:products: modify products in your account
            read:products: read your products
    api_key:
      type: apiKey
      name: api_key
      in: header
